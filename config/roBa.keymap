#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <11 12>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        backquote {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R       &kp T                                        &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_SHIFT A  &kp S         &kp D         &kp F       &kp G        &mkp MB3         &kp BACKSLASH  &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z             &kp X         &kp C         &kp V       &kp B        &kp MINUS        &kp EQUAL      &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_WIN  &lt 1 CAPS  &lt 2 SPACE  &lt 6 SPACE      &kp BACKSPACE  &lt 6 ENTER                             &kp ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM_FUNCTION {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                      &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8  &kp NUMBER_9      &kp NUMBER_0
&trans        &kp PLUS      &kp MINUS     &kp ASTERISK  &kp SLASH     &trans      &trans  &trans            &kp EQUAL          &kp MINUS     &kp SINGLE_QUOTE  &trans
&trans        &trans        &trans        &kp CARET     &kp PERCENT   &trans      &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans        &trans            &trans
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans                                                               &kp BACKSLASH
            >;
        };

        SYMBOLS {
            bindings = <
&kp GRAVE                   &kp EXCLAMATION  &kp AT_SIGN      &kp HASH         &kp DOLLAR                                                  &kp PERCENT       &kp CARET          &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS
&kp LEFT_SHIFT              &kp PLUS         &kp MINUS        &kp ASTRK        &kp SLASH   &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE     &kp EXCLAMATION   &kp EQUAL          &kp MINUS      &trans        &trans
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &kp LEFT_BRACKET             &kp RIGHT_BRACKET  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans         &trans        &trans
&trans                      &trans           &trans           &trans           &trans      &trans                       &trans             &trans                                                            &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans    &trans          &trans        &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans    &trans          &trans        &trans           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4   &kp F5                            &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp F6     &kp F7        &kp F8        &kp F9   &kp F10  &trans      &trans       &kp LEFT      &kp DOWN_ARROW  &kp UP        &kp RIGHT     &trans
&kp Z      &kp X         &kp C         &kp F11  &kp F12  &trans      &bootloader  &trans        &mkp MB1        &mkp MB3      &mkp MB2      &bt BT_CLR
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN  &trans   &trans   &trans      &trans       &trans                                                    &bt BT_CLR_ALL
            >;
        };
    };
};
